@startuml Reversi Class Diagram

title Reversi UML Class Diagram
Player o-- HumanPlayer
Player o-- AIPlayer
AIPlayer o-- Game
GameLogic o-- AIPlayer
Game o-- Board
Game o-- GameLogic
Game o-- HumanPlayer
GameConsoleView o-- Game
BoardConsoleView o-- Board
BoardView o-- BoardConsoleView
GameConsoleView o-- BoardView
GUI_View o-- Game
GUI_View o-- BoardView
BrowserView o-- BoardView
BrowserView o-- Game
GameView o-- GameConsoleView
GameView o-- GUI_View
GameView o-- BrowserView
GameController *-- HumanPlayer
GameController *-- AIPlayer
GameController *-- GameLogic
GameController *-- Game    
GameController *-- Board
GameController *-- BoardView
GameController *-- GameView

class HumanPlayer {
    + name 
    + symbol
    + colour
    + get_move_human()
}

class AIPlayer {
    + name 
    + symbol
    + colour
    + valid_moves
    + depth
}

class Player {
    + name
    + colour
}

class Board {
    + size
    + mat
    + get_cell(row, col)
    + update_board(row, col)
    + place_starting_pieces(player1, player2)
}

class Game {
    + board
    + logic
    + curr_player
    + opponent
    + is_valid
    + change_player()
    + check_winner()
    + record_winner()
}

class GameLogic {
    + is_valid_move()
    + compile_valid_moves()
    + sum_player_pts()
    + make_move()
    + choose_move()
    + minimax()
}

abstract class GameView {
    + display_greeting_message()
    + get_game_mode()
    + get_human_name()
    + get_ai_depth()
    + draw_board()
    + display_winner()
    + display_score()
}

class GameConsoleView {
    + display_greeting_message()
    + get_game_mode()
    + get_human_name()
    + get_ai_depth()
    + draw_board()
    + display_winner()
    + display_score()
}

abstract class BoardView {
    + board
    + draw_board()
}

class BoardConsoleView {
    + board
    + draw_board()
}

class GUI_View {}

class BrowserView {}

class GameController {
    + model
    + view
    + start_game()
    + run_game()
}

@enduml